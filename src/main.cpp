#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <DHT.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Define button pins
#define BUTTON_UP 4
#define BUTTON_DOWN 2
#define BUTTON_ENTER 18
#define BUTTON_BACK 5

#define DHTPIN 32
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

int menuIndex = 0;
int numMenus = 10;

//check for enter menu
bool tempMenu = false;
bool humidityMenu = false;

int itemPerPage = 5;
static int menuOffset = 0;

const unsigned char tempHotPic[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x02, 0x01, 0xe0, 0x00, 0x00, 0x10, 0x42, 
	0x10, 0x00, 0x00, 0x07, 0x02, 0x10, 0x00, 0x00, 0x08, 0x02, 0x10, 0x00, 0x00, 0x28, 0xa2, 0x10, 
	0x00, 0x00, 0x05, 0x02, 0xd3, 0x80, 0x00, 0x02, 0x02, 0xd0, 0x00, 0x00, 0x12, 0x42, 0xd0, 0x00, 
	0x00, 0x02, 0x02, 0xd0, 0x00, 0x00, 0x00, 0x02, 0xd3, 0x80, 0x00, 0x00, 0x02, 0xd0, 0x00, 0x00, 
	0x00, 0x02, 0xd0, 0x00, 0x00, 0x00, 0x02, 0xd0, 0x00, 0x00, 0x00, 0x02, 0xd3, 0x00, 0x00, 0x00, 
	0x02, 0xd3, 0x00, 0x00, 0x00, 0x02, 0xd0, 0x00, 0x00, 0x00, 0x02, 0xd0, 0x00, 0x00, 0x00, 0x02, 
	0xd0, 0x00, 0x00, 0x00, 0x02, 0xd3, 0x80, 0x00, 0x00, 0x02, 0xd0, 0x00, 0x00, 0x00, 0x02, 0xd0, 
	0x00, 0x00, 0x00, 0x02, 0xd0, 0x00, 0x00, 0x00, 0x04, 0xc8, 0x00, 0x00, 0x00, 0x09, 0xe4, 0x00, 
	0x00, 0x00, 0x0b, 0xf4, 0x00, 0x00, 0x00, 0x1b, 0xf6, 0x00, 0x00, 0x00, 0x1b, 0xf6, 0x00, 0x00, 
	0x00, 0x0b, 0xf4, 0x00, 0x00, 0x00, 0x09, 0xe4, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 
	0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char tempCoolPic[] PROGMEM = {
	// 'Screenshot 2025-03-06 213142 (1)', 33x40px
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0xd8, 0x00, 0x00, 0x07, 0x01, 
	0x0c, 0x00, 0x00, 0x12, 0x41, 0x0c, 0x00, 0x00, 0x1a, 0xc1, 0x0c, 0x00, 0x00, 0x07, 0x01, 0x0c, 
	0x00, 0x00, 0x1a, 0xc1, 0x0d, 0xe0, 0x00, 0x12, 0x41, 0x0c, 0x00, 0x00, 0x07, 0x01, 0x0c, 0x00, 
	0x00, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x0d, 0xe0, 0x00, 0x00, 0x01, 0x0c, 0x00, 0x00, 
	0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x0c, 0xc0, 0x00, 0x00, 
	0x01, 0x0c, 0xe0, 0x00, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x01, 
	0x0c, 0x00, 0x00, 0x00, 0x01, 0x6d, 0xe0, 0x00, 0x00, 0x01, 0x6c, 0x00, 0x00, 0x00, 0x01, 0x6c, 
	0x00, 0x00, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x06, 0x76, 0x00, 0x00, 0x00, 0x04, 0xf3, 0x00, 
	0x00, 0x00, 0x09, 0xf9, 0x00, 0x00, 0x00, 0x09, 0xfd, 0x00, 0x00, 0x00, 0x0b, 0xfd, 0x80, 0x00, 
	0x00, 0x09, 0xfd, 0x00, 0x00, 0x00, 0x0c, 0xfb, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 
	0x03, 0x9c, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char humidityPic[] PROGMEM = {
	// 'Screenshot 2025-03-06 231014', 33x40px
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xf8, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x80, 
	0x38, 0x00, 0x00, 0xf1, 0x80, 0x00, 0x00, 0x01, 0xf3, 0xc0, 0x00, 0x00, 0x01, 0xf3, 0xc0, 0xf8, 
	0x00, 0x03, 0xf7, 0xe0, 0x00, 0x00, 0x03, 0xf7, 0xe0, 0x38, 0x00, 0x07, 0xef, 0xf0, 0x10, 0x00, 
	0x07, 0xef, 0xf0, 0x00, 0x00, 0x07, 0xdf, 0xf8, 0xf8, 0x00, 0x07, 0xdf, 0xf8, 0x00, 0x00, 0x07, 
	0x9f, 0x9c, 0x00, 0x00, 0x03, 0xbf, 0x28, 0x00, 0x00, 0x01, 0xbe, 0x72, 0x00, 0x00, 0x00, 0x3e, 
	0xd6, 0x00, 0x00, 0x00, 0x3e, 0xf4, 0x00, 0x00, 0x00, 0x3f, 0x6c, 0x00, 0x00, 0x00, 0x3f, 0x8f, 
	0x00, 0x00, 0x00, 0x1f, 0xdf, 0x80, 0x00, 0x00, 0x0f, 0x96, 0x80, 0x00, 0x00, 0x07, 0xa3, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


String menus[] = {"Menu 1", "Temp", "Humid", "Menu 4", "Menu 5", "Menu 6", "Menu 7", "Menu 8", "Menu 9", "Menu 10"};

void displayMain(){
  if (menuIndex >= menuOffset + itemPerPage) menuOffset += 1;
  if (menuIndex < menuOffset) menuOffset -= 1;

  for (int i = 0; i < itemPerPage; i++) {
      int menuPosition = menuOffset + i;
      if (menuPosition >= numMenus) break; 

      if (menuPosition == menuIndex) display.drawRect(0, i * 10 + 10, 100, 10, SSD1306_WHITE);
      
      display.setCursor(5, i * 10 + 12);
      display.print(menus[menuPosition]);
  }

  int scrollbarHeight = itemPerPage * 10;
  int maxOffset = numMenus - itemPerPage;
  int scrollbarY = 10;

  if (maxOffset > 0) {
      scrollbarY = 10 + ((menuOffset * (scrollbarHeight - 10)) / maxOffset);
  }

  display.drawRect(120, 10, 5, scrollbarHeight, SSD1306_WHITE);
  display.fillRect(120, scrollbarY, 5, 10, SSD1306_WHITE);
  display.display();
}

void displayTemperature() {
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(40, 0);
    display.println("Temp");

    float temperature = dht.readTemperature();

    if(temperature > 20) display.drawBitmap(10, 10, tempHotPic, 33, 40, WHITE);
    else if(temperature < 20) display.drawBitmap(10, 10, tempCoolPic, 33, 40, WHITE);

    display.setTextSize(2);
    display.setCursor(40, 30);
    display.print(temperature);
    display.println("*C");

    if (isnan(temperature)) {
        Serial.println("Failed to read temperature!");
        display.print("Error");
    } else {
        Serial.print(temperature);
        Serial.println(" C");
    }
    display.display();
}

void displayHumidity(){
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(20, 0);
  display.println("Humidity");

  float humidity = dht.readHumidity();

  display.drawBitmap(10, 10, humidityPic, 33, 40, WHITE);

  display.setCursor(50, 25);
  display.print(humidity);
  display.println("%");

    if (isnan(humidity)) {
        Serial.println("Failed to read humidity!");
        display.print("Error");
    } else {
        Serial.print(humidity);
        Serial.println(" %");
    }

  display.display();
}

void handleButtonPress() {
    if (digitalRead(BUTTON_UP) == LOW) {
        if (menuIndex > 0) {
            menuIndex -= 1;
            Serial.println(menuIndex);
        }
        Serial.println("btn up pressed");
        delay(200);
    }
    if (digitalRead(BUTTON_DOWN) == LOW) {
        if (menuIndex < numMenus - 1) {
            menuIndex += 1;
            Serial.println(menuIndex);
        }
        Serial.println("btn down pressed");
        delay(200);
    }
    if (digitalRead(BUTTON_ENTER) == LOW) {
        if (menuIndex == 1) {  
          tempMenu = true;
        } else if(menuIndex == 2) {
          humidityMenu = true;
          Serial.print("humidityMenu : " );
          Serial.println(humidityMenu);
        }
        Serial.println("btn enter pressed");
        delay(200);
    }
    if (digitalRead(BUTTON_BACK) == LOW) {
        if (tempMenu) tempMenu = false;
        else if(humidityMenu) humidityMenu = false;
        Serial.println("btn back pressed");
        delay(200);
    }
}

void displayMenu() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);

    displayMain();
}

void setup() {
    Serial.begin(115200);
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;);
    }

    dht.begin();
    delay(2000);

    display.display();
    delay(2000);
    display.clearDisplay();

    pinMode(BUTTON_UP, INPUT_PULLUP);
    pinMode(BUTTON_DOWN, INPUT_PULLUP);
    pinMode(BUTTON_ENTER, INPUT_PULLUP);
    pinMode(BUTTON_BACK, INPUT_PULLUP);
}

void loop() {
    handleButtonPress();

    if (tempMenu) {
        displayTemperature();
    } else if(humidityMenu) {
        displayHumidity();
    } else {
        displayMenu();
    }
}
